超级具有挑战的一道JS题目,看过来：
  function Foo(){
			getName = function(){
				alert(1);
			}
			return this;
		}
		Foo.getName = function(){
			alert(2);
		}
		Foo.prototype.getName = function(){
			alert(3);
		}
		var getName = function(){
			alert(4);
		}
		function getName(){
			alert(5);
		}
		//请写出一下输出结果
		Foo.getName();
		getName();
		Foo().getName();
		getName();
		new Foo.getName();
		new Foo().getName();
		new new Foo().getName();
    答案 是：2,4,1,1,2,3,3 
    
    解释：首先定义了一个叫Foo的函数，之后为Foo创建了一个叫getName的静态属性存储了一个匿名函数，之后为Foo的原型对象新创建了一个叫
    getName的匿名函数，之后又通过函数变量表达式创建了一个getName的函数，最后再声明一个叫getName函数。
    第一问的Foo.getName自然是访问Foo函数上存储的静态属性，自然是2,
    第二问:首先得先看看这几行代码，这里涉及到一个变量提升的问题，实际上真正执行的代码是这样的：
   function Foo(){
			getName = function(){
				alert(1);
			}
			return this;
		}
		var getName;// 只是提升变量声明
		function getName(){//提升函数声明，覆盖var 声明
			alert(5);
		}
		Foo.getName = function(){
			alert(2);
		}
		Foo.prototype.getName = function(){
			alert(3);
		}
	    function getName(){
			alert(4);
		}
    
    所有的声明变量（其中var getName 是函数表达式）或函数声明（function getName）都会被提升，只是最大的区别：函数表达式将此代码拆成两部分代码执行
    ，所以是4
    第三问：平时我们可能看到在一块代码中有这样的语句：
    //...
    getName = function(){alert(1)} 
    a = 5;
    //...
    
    这两行代码重变量都没有声明，我们可以认为是全局变量，但是它是由来历的，这是一个赋值的操作，js引擎会逐层搜索这个变量，如果找到最外层还是没有，则给它
    重新赋值、声明。
    对于此题，先执行了Foo函数，然后调用Foo函数的返回值对象的getName属性函数。当执行到此处赋值的语句时，先向当前作用域内找getName变量，没找到，再向当前
    函数作用域上层找，此时找到了也就是第二问中的alert(4);此时外层的getName函数被修改了，这正是第四问的结果。
    从第五问之后，都是和js运算符优先级有关的问题：（），.，new的优先级大小如下：
    （） >  .  > new
    相当于：new (Foo.getName)(); 也就是执行了构造函数
    第六问：相当于：(new Foo()).getName()
    而Foo此时作为构造函数却又返回值，在传统语言中，构造函数不应该有返回值，实际执行的返回值就是此构造函数的实例化对象。而在js中构造函数可以有返回值也可以没有
    分为三种情况：
    （1）没有返回值则按照其他语言一样返回实例化对象
    function F(){}
    new F()
    F{}
    （2）有返回值但是是非引用类型，同（1）
    （3）有返回值是应用类型
    function F(){return {a:1}}
    new F()
    Object {a:1}
    原题中，返回的是this，而this在构造函数中本来就代表当前实例化对象，遂最终Foo函数返回实例化对象。
  之后调用实例化对象的getName函数，因为在Foo构造函数中没有为实例化对象添加任何属性，遂到当前对象的原型对象（prototype）中寻找getName，找到了。
  
    第七问：
    new ((new Foo()).getName)();
    先初始化Foo的实例化对象，然后将其原型上的getName函数作为构造函数再次new。最终结果为3
    
    
    
