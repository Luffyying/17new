<html5>
    <script>
    
        //新增一个尾递归的写法：
        function fibonacci2(n) {
            var a = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var b = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
            if (n === 0) {
                return a
            }
            return fibonacci2(n - 1, b, a + b);
        }
        
        fibonacci2(5) ->
        fibonacci2(4, 1, 1)  
        fibonacci2(3, 1, 2)  
        fibonacci2(2, 2, 3)  
        fibonacci2(1, 3, 5)  
        fibonacci2(0, 5, 8) => return 5  
        
        自底向上，可以有效避免爆栈
        
        
        /*递归的解法：
        优点：代码简洁，
        缺点：每次函数在调用自己的时候，都要在内存中分配空间来存储参数，像栈里圧入数据
        和弹出数据都要消耗时间，数量大的时候容易引起'调用栈溢出'，而且过程中计算了大量
        重复的数据，时间复杂度随着n的增加按照指数级别
        循环的解法：
        O(N)
        
        */
        function fibo(n){
            var result = [0,1]
            if(n<2){
                return result[n]
            }
            let total = null
            let small = result[0]
            let latestsmall = result[1]
            for(let i=2;i<=n;i++){
                
                total = small + latestsmall
                small = latestsmall
                latestsmall = total
            }
            return total
        }
        console.log(fibo(10))


        function otherfi(n){
            if(n==0){
                return 0
            }else if(n==1){
                return 1
            }else{
                return otherfi(n-1)+otherfi(n-2)
            }
        }
        console.log(otherfi(10))

    </script>
</html5>
